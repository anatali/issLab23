/* 
 * ================================================================================
 * unibo.basicrobot23
 * ================================================================================
 */  
   
System /* -trace -msglog  */ basicrobot23    
  
Dispatch cmd       	: cmd(MOVE)      
Dispatch end       	: end(ARG)   

Request step       : step(TIME)	
Reply stepdone     : stepdone(V)  
Reply stepfailed   : stepfailed(DURATION, CAUSE)	

Event  sonardata   : sonar( DISTANCE ) 	   
Event obstacle     : obstacle(X) 

Request  doplan     : doplan( PATH, STEPTIME )
Reply doplandone    : doplandone( ARG ) 
Reply doplanfailed  : doplanfailed( ARG )

Dispatch setrobotstate: setpos(X,Y,D)
//Dispatch setsteptime:setsteptime(T)

Request engage        : engage(OWNER, STEPTIME)	
Reply   engagedone    : engagedone(ARG)
Reply   engagerefused : engagerefused(ARG)

Dispatch disengage    : disengage(ARG)
//Dispatch engaged      : engaged(ARG)
//Dispatch disengaged   : disengage(ARG)

Request checkowner    : checkowner(CALLER)
Reply checkownerok    : checkownerok(ARG)
Reply checkownerfailed: checkownerfailed(ARG)

Event alarm           : alarm(X)
Dispatch nextmove     : nextmove(M)
Dispatch nomoremove   : nomoremove(M)

Dispatch setdirection : dir( D )  //D =up|down!left|right

//Endosimbiosi di robotpos
Request moverobot    :  moverobot(TARGETX, TARGETY)  
Reply moverobotdone  :  moverobotok(ARG)
Reply moverobotfailed:  moverobotfailed(PLANDONE, PLANTODO)


//Richieste di info
Request getrobotstate : getrobotstate(ARG)
Reply robotstate      : robotstate(POS,DIR)

Context ctxbasicrobot ip [host="localhost" port=8020]  

CodedQActor datacleaner    context ctxbasicrobot className "rx.dataCleaner"    //riceve l'evento sonarRobot
CodedQActor distancefilter context ctxbasicrobot className "rx.distanceFilter" //genera l'evento  obstacle e sonardata

/* 
 * ------------------------------
 * engager 
 * ------------------------------
 */ 
QActor engager context ctxbasicrobot{
[#     
  //var Owner           = "unkknown"
  var EngageCaller    = ""
  var EngageDone      = false
  var curConn : Interaction? = null 
  var OwnerMngr       = supports.OwnerManager //Kotlin object
#]  	
	State s0 initial { 	  
		//printCurrentMessage color magenta
		if [# ! currentMsg.isEvent() #]{ println("$name waiting ..")   }
	} 
	Transition t0 whenRequest engage     ->  handleEngage  
		          whenMsg disengage      ->  disengageRobot
		          whenRequest checkowner ->  checkTheOwner
     			   
    State handleEngage{
    	printCurrentMessage 
			onMsg( engage : engage(OWNER, STEPTIME) ) {
				[# if( currentMsg.conn != null ) curConn = currentMsg.conn					
				   EngageCaller  = currentMsg.msgSender() //payloadArg(0)
				   if( curConn != null )
				     CommUtils.outmagenta("engager | engaged by remote $EngageCaller on $curConn" )		
				   else CommUtils.outmagenta("engager | engaged by local $EngageCaller " )	
				   EngageDone = OwnerMngr.engage(EngageCaller)
				   if( EngageDone ) OwnerMngr.setStepTime(payloadArg(1))
				#]
			}
     }
     //Goto engageAccept if [# Owner == "unkknown" || Owner == EngageCaller || EngageCaller == "gui23xyz9526" #] else engageRefuse
     Goto engageAccept if [# EngageDone #] else engageRefuse
     
     
     
    State disengageRobot{  
    	//printCurrentMessage 
     	//[# Owner  = "unkknown"  #]
     	[# OwnerMngr.disengage()  #]
     	println( "$name has disengaged")
    	//forward basicrobot -m disengaged : disengaged($Owner)  //ancora necessario?
    	emitlocalstream alarm : alarm(disengaged)  //lo elabora planexec
    }
    Goto s0 
    
    State engageRefuse{
    	[# val Owner = OwnerMngr.owner  #]
    	println("$name engage refused since already working for $Owner") 
     	replyTo engage with engagerefused : engagerefused($Owner)
    }
    Goto s0  
      
    State engageAccept{	
    	printCurrentMessage 
		[# val Owner    = OwnerMngr.owner #]
		updateResource [# "workingfor($Owner)" #] 			
		replyTo engage with engagedone : engagedone($Owner)
		//forward basicrobot    -m engaged : engaged($Owner) //Non necessario
		//I messaggi che arrivano al basicrobot sono elaborati solo se OwnerMngr.owner ok	 			 
	} 
	Goto s0
	 
	State handleEvent{
		printCurrentMessage
		[# CommUtils.outcyan("handleEvent $currentMsg") 
		   val info = currentMsg.toString()
		   if( curConn != null ) CommUtils.forwardOnInterconn(curConn,info) //invio l'evento al caller'
		#]
 	}
 	Goto s0
 	
 	//Added June6. Poi removed a favore di OwnerMngr
 	State checkTheOwner{
 		printCurrentMessage
 		/*
 		onMsg( checkowner    : checkowner(CALLER) ){
 			[# val Caller = payloadArg(0) #]
  		    println("$name checkTheOwner $Caller owner=$Owner")
 			if [# Owner == Caller || Caller == "gui23xyz9526" #] { replyTo checkowner with checkownerok : checkownerok(Owner)}
 			else { replyTo checkowner with checkownerfailed : checkownerfailed(Owner)}
 		}*/
 	}
 	Goto s0 
}

/*
 * ------------------------------
 * basicrobot
 * ------------------------------
 */ 
QActor basicrobot context ctxbasicrobot{
[#  
  var StepTime      = 0L
  var StartTime     = 0L     
  var Duration      = 0L   
  var RobotType     = "" 
  var CurrentMove   = "unkknown"
  var StepSynchRes  = false
  var OwnerMngr     = supports.OwnerManager //Kotlin object
  var AnswerKo      = ""
  
  fun checkOwner( ) : Boolean {
  	return OwnerMngr.checkOwner( currentMsg.msgSender() )
  }
#]      
 	State ss0 initial { 	
 		//printCurrentMessage       
 		discardMsg On  //In the intial phase ...
 		
 		delegate "engage" to engager
 		delegate "disengage" to engager
 		delegate "doplan" to planexec
 		delegate "getrobotstate" to robotpos
 		delegate "setrobotstate" to robotpos
 		delegate "moverobot" to robotpos
 		delegate "setdirection" to robotpos
 		
 		//[# unibo.comm22.utils.CommSystemConfig.tracing = false #]  //tracing at unibo.comm22 level
 		//delay 1000  //per inserzione in docker
		//[# sysUtil.trace = true #]  //Trace the behavior of ActorBasic
 		qrun uniborobots.robotSupport.create(myself,"basicrobotConfig.json")	 		
 		[# RobotType = uniborobots.robotSupport.robotKind #]  
 		delay 3000 //per inserzione in docker: attesa per wenv  
 		println("basicrobot | STARTING ... ") color magenta
 		//realsonar creato da uniborobots.robotsupport come sonarHCSR04SupportActor
  	    //[# subscribeToLocalActor("distancefilter").subscribeToLocalActor("realsonar") #] 
  	    //sottoscrive this a distancefilter e distancefilter a realsonar 
  	    //DOVERI DIRE: subscribe distancefilter to realsonar (che è partito)
  	    //E subscribe this a distancefilter
  	    [#  subscribeTo("distancefilter","realsonar")
  	    	subscribeToLocalActor("distancefilter")
  	    #]
  	      
  		run uniborobots.robotSupport.move( "a" )    //synch 
 		run uniborobots.robotSupport.move( "d" )	//synch
  		//delay 2000 //per inserzione in docker
 	}  
 	Goto work
 
  	
	State work{ 
		//printCurrentMessage   
        updateResource [# "basicrobot(started)" #]
		discardMsg Off //We want store the non-handled messages
		println("basicrobot  | waiting, working for ${OwnerMngr.owner} ... ")  color magenta 
	} 
	Transition t0   whenRequest  step      -> doStep		
					whenMsg     cmd        -> execcmd
				  	whenMsg     end        -> endwork			  
	                //whenMsg     disengaged -> waitForOwner
	                //whenMsg     engaged    -> work  //repetita ...
	
	State execcmd{ 
		printCurrentMessage
		if [#   checkOwner() #] {   
			onMsg( cmd : cmd(MOVE) ){
	  			//activate the motors  
	  			[# CurrentMove = payloadArg(0) #] 
				run uniborobots.robotSupport.move( payloadArg(0 ) )
				updateResource [# "moveactivated(${payloadArg(0)})" #]
			}
		}
	 }
	 Goto work   
	
   	State doStep{ 
 		//printCurrentMessage  
 		if [#   checkOwner() #] {   
			onMsg( step : step( T ) ){  
				[#	StepTime     = payloadArg(0).toLong()  	#]    
				updateResource [# "step(${StepTime})" #]
	  		}  
	        //println("basicrobot | doing doStep StepTime=$StepTime  ")        
	        memoCurrentTime StartTime  
	        [# StepSynchRes = uniborobots.robotSupport.dostep( StepTime ) #]          
        } else{
 		    //println("$name doStep AnswerKo=$AnswerKo") color red
        	[# AnswerKo = "youarenotowner" #]
			//replyTo step with stepfailed : stepfailed($Duration, noowner)
		}
	}  	
	Goto stepok if [# StepSynchRes #] else stepKo 
 
     	 
	State stepok{   
		//printCurrentMessage
		[# StepSynchRes = false #]
 		run uniborobots.robotSupport.move( "h" )  //stop the (real) robot 
		updateResource [# "stepDone($StepTime)" #]
   		//emit info : info( stepdone($StepTime) )
   		replyTo step with stepdone : stepdone($StepTime)
		//println("basicrobot | stepDone reply done")
  	}
	Goto work  
 
	State stepKo{ 
		//println("$name stepKo AnswerKo=$AnswerKo") color red 	 
		if [# AnswerKo == "" #]{
			setDuration Duration from StartTime
			//printCurrentMessage
			run uniborobots.robotSupport.move( "h" )  //stop the (real) robot
			[# var TunedDuration   = StepTime - ((Duration * 0.80)).toLong()   #]
			//println("basicrobot | stepKo $StepTime  duration=$Duration  TunedDuration=$TunedDuration") color magenta
			if [# TunedDuration > 30 #]{
				run uniborobots.robotSupport.move( "s" )
				delayVar TunedDuration 
				run uniborobots.robotSupport.move( "h" ) 
		 		updateResource [# "stepFail($Duration)" #] 
		 		delay 300
			}
		 	replyTo step with stepfailed : stepfailed($Duration, obst)
	 	}else{
	 		replyTo step with stepfailed : stepfailed($Duration, $AnswerKo)
	 		[# AnswerKo = "" #]
	 	}
    } 
	Goto work 

					
	State endwork{ 
		//printCurrentMessage
		updateResource [# "basicrobot(end)" #]	 		
 		//terminate 1
	}   
   
} 
  
/*
 * ------------------------------
 * planexec
 * ------------------------------
 */
QActor planexec context ctxbasicrobot{
	[#  var Plan          = ""
		var PlanOrig      = ""
		var CurMoveTodo   = ""		
		var StepTime      = "200"
		var OwnerMngr     = supports.OwnerManager //Kotlin object
		var IsOwner       = false
   	#]
	State s0 initial{
		subscribeTo engager 
        //[# StepTime = uniborobots.robotSupport.readStepTime( )	#]		
	}
	Goto work

	State work{
		//println("planexec | waiting ...")  
	}
	Transition t0 whenRequest doplan -> checkTheOwner
	
    
    State checkTheOwner{
    	//printCurrentMessage color blue
    	onMsg( doplan : doplan(PLAN, STEPTIME)){
    		[# Plan       = payloadArg(0).replace("[","").replace("]","").replace(",","").replace(" ","")
			   PlanOrig   = Plan
			   StepTime   = payloadArg(1) 
    		   val Caller = currentMsg.msgSender() //payloadArg(1) 
    		   IsOwner    = OwnerMngr.checkOwner( Caller )
    		#]
    		//println("$name | checkTheOwner $Caller")
    		//request engager -m checkowner : checkowner($Caller)
    	}
    }
    Goto nextMove if [# IsOwner #] else planrefused
    /*
    Transition t0 whenReply checkownerok -> execplan
                  whenReply checkownerfailed -> planrefused
    
    
	State execplan{
		//printCurrentMessage color red
 
	}  
	Transition t0 
		whenTime 100    -> nextMove
		//whenEvent alarm -> planinterruptedalarm
	*/
	
	State nextMove{ 
		[# 
		   if( Plan.length > 0  ){
		   	CurMoveTodo =  Plan.elementAt(0).toString() 
		   	Plan        =  Plan.removePrefix(CurMoveTodo)
		   }else{
		   	CurMoveTodo = ""
		   	Plan        = "empty"
		   } 		   
		#]
/*		
		//println("$name | CurMoveTodo= $CurMoveTodo remain:$Plan" ) 
		forward planexec -m nextmove : nextmove($CurMoveTodo)
	} 	 
	Transition t0  whenEvent alarm   -> planinterruptedalarm
		           whenMsg nextmove  -> doMove
	
	State doMove{
 */
 		//println("$name | domove $CurMoveTodo")  
 		if [# CurMoveTodo == "" #] { 
 			forward planexec -m nomoremove : nomoremove(end)
 		}
		else{ if [# CurMoveTodo == "w" #] {
	 			delay 300  //avoid too fast ...
	 			//Il supporto non fa step-back
	 			//Chiedo di fare step 
	 			//[# StepSynchRes = uniborobots.robotSupport.dostep( StepTime ) #]
	 			request basicrobot -m step : step($StepTime)	//mentre fa doplan ...		
			}else{
				//println("$name | doMoveTurn $CurMoveTodo")  
				run uniborobots.robotSupport.move(  CurMoveTodo )
				forward planexec -m nextmove : nextmove(goon)
			}
		}
 	}  
	Transition t0  whenReply stepfailed -> planinterruptedobstacle
				   whenEvent alarm      -> planinterruptedalarm
	               whenMsg nomoremove   -> planend
	               whenMsg nextmove     -> nextMove 
	               whenReply stepdone   -> nextMove 
//alarm gestito solo se non c'è stepfailed
 	
	State planend{ 
		//printCurrentMessage color red
		if [# currentMsg.msgContent() == "alarm(disengaged)" #]{}
		else{ 
			if [# currentMsg.msgId() == "alarm" #]{
		 		println("$name |  planend alarm $Plan $CurMoveTodo")	 
		 		[# val Plantodo = CurMoveTodo + Plan #]
		 		replyTo doplan with doplanfailed : doplanfailed( $Plantodo )			
			}else{ 
				println("$name | planend ok plan=$PlanOrig ") color blue
				replyTo doplan with doplandone : doplandone($PlanOrig)
				updateResource [# "plandone($PlanOrig)" #] 
			}
		}
	}
	Goto work
	
	State planinterruptedobstacle{  
		//printCurrentMessage
 		println("$name |  planinterruptedobstacle $CurMoveTodo ")	color magenta
 		[# var Plantodo =  CurMoveTodo + Plan
 		#]
 		updateResource [# "planfailed($PlanOrig,$Plantodo )" #] 
 		replyTo doplan with doplanfailed : doplanfailed( $Plantodo )
 	}	
 	Goto work 
 	
 	State planinterruptedalarm{  
		//printCurrentMessage
 		//println("$name |  planinterruptedalarm $CurMoveTodo ")	color magenta
 		//[# var Plantodo = CurMoveTodo + Plan
 		//#]
 		//updateResource [# "planfailed($PlanOrig,$Plantodo )" #] 
 		//replyTo doplan with doplanfailed : doplanfailed( $Plan )
 	}	 
 	Transition t0 //whenTime 200 -> work  //THanks to Mirabella 2023
 				  whenMsg nextmove    ->  nonextmovesincealarm
 				  whenReply stepdone  ->  nonextmovesincealarm //possiblestepdonemirabella
 				  whenReply stepfailed -> planinterruptedobstacle //work

 	//State possiblestepdonemirabella{
 	//	request basicrobot -m getrobotstate : getrobotstate(ARG)
 	//}
 	//Transition t0 whenReply robotstate -> setstatemirabella

	State nonextmovesincealarm{
 		println("$name |  nonextmovesincealarm $CurMoveTodo plantodo=$Plan") color magenta
 		updateResource [# "planfailed($PlanOrig,$Plan )" #] 
 		if [# Plan.length == 0 #]{ //Piano esaurito nonostante l'allarme
 			replyTo doplan with doplandone : doplandone($PlanOrig)
 		}else{ //Piano interrotto; da fare ancora: Plan
 		   replyTo doplan with doplanfailed : doplanfailed( $Plan )
 		}
	}
	Goto work
	/*Il piano esegue sempre almeno la prima mossa prima di essere interrotto
	 */
	 /* 
 	State setstatemirabella{
 		onMsg(robotstate:robotstate(Pos,Dir)){
 			[#
 				var Pos = payloadArg(0)
 				var Dir = payloadArg(1)
 				var X = 0
 				var Y = 0
 				val regex = """pos\((\d+),(\d+)\)""".toRegex()
				val matchResult = regex.find(Pos)
				if (matchResult != null) {
				    val (yStr, xStr) = matchResult.destructured
				    X = xStr.toInt()
				    Y = yStr.toInt()
 				}else {
				    CommUtils.outred("setstatemirabella Invalid input format")  
				}

 				when (Dir) {
			    "UP" -> X-=1
			    "DOWN" -> X+=1
			    "LEFT" -> Y-=1
			    "RIGHT" -> Y+=1
			    else -> { // Note the block
			        CommUtils.outred("setstatemirabella errore direzione")  
			    }
			}
 			#]
 			println("$Pos -x $X y $Y  - $Dir") color black
 			forward basicrobot -m setrobotstate: setpos($Y,$X,$Dir)

 		}
 	}
 	Goto work
 	*/
 	State planrefused{
 		replyTo doplan with doplanfailed : doplanfailed( youarenotowner )
 		//TODO: inserire motivazione fallimento ?
 	}
 	Goto work
}

/*
 * ------------------------------
 * robotpos
 * ------------------------------
 */  
   	
QActor robotpos context ctxbasicrobot{
	[# val planner = unibo.planner23.Planner23Util()
	    //val MapName = "mapEmpty23"
	    val MapName = "mapCompleteWithObst23ok"
	    val MyName    = name //upcase var
		var OwnerMngr = supports.OwnerManager //Kotlin object
		var IsOwner   = false
	    var StepTime  = "330"
		var Plan      = ""	
		var Caller    = ""
		var TargetX   = ""
		var TargetY   = ""
		var X         = ""
		var Y         = ""
		var D         = ""
	#]
	State s0 initial{
        println("$name STARTS loading $MapName") 
        //[# StepTime = OwnerMngr.steptime //uniborobots.robotSupport.readStepTime( )	 		
 		//#]		
        
		[# planner.initAI()  
		   planner.loadRoomMap(MapName) 
		   planner.showMap()
		#]
	}
	Goto waitclientrequest
 		              
	State waitclientrequest{
		println("$name | waiting the client request...")
	}              
	Transition t0 whenRequest getrobotstate -> getRoboSstate
				  whenRequest moverobot -> checkTheOwnerForMove //elabClientRequest
				  whenMsg setrobotstate -> checkTheOwnerForSet  //setTheRobotState
				  whenMsg setdirection  -> checkTheOwnerForSetDir  //setTheRobotState

    //Non fa check su owner: risponde a tutti
    State getRoboSstate{
    	[# val PX   = planner.getPosX() 
    		val PY  = planner.getPosY()
    		val DIR = ""+planner.getDir()
    	#]
    	replyTo getrobotstate with robotstate : robotstate(pos($PX,$PY),$DIR)
    }
    Goto waitclientrequest
    
    
    State checkTheOwnerForSetDir{
 		onMsg(setdirection : dir( D )){
			[# D       = payloadArg(0)
 			   Caller  = currentMsg.msgSender() 
 			   IsOwner = OwnerMngr.checkOwner( Caller )
 			   
			#]						 
		}
   		//request engager -m checkowner : checkowner($Caller)
    }
    Goto setTheRobotDirection if [# IsOwner #] else waitclientrequest
    /*
    Transition t0 whenReply checkownerok     -> setTheRobotDirection
                  whenReply checkownerfailed -> waitclientrequest
    */
    State setTheRobotDirection{
    	//println("setTheRobotDirection $D") color magenta
    	[# Plan = planner.setTheDirection(D) #]  //Solo nel planner ? Anche nel real world ...
    	//[# planner.showCurrentRobotState() #]
    	//println("setTheRobotDirection plan=$Plan caller=$Caller") color magenta
    	request planexec -m doplan : doplan( $Plan, $StepTime )
    }
    //Goto waitclientrequest
 	Transition t0 whenReply doplandone   -> planfordirok
	              whenReply doplanfailed -> fatalerror
    
    State planfordirok{
		[# planner.doPathOnMap(Plan) #]
		[# planner.showCurrentRobotState(); #]
		updateResource [# planner.robotOnMap() #] 
	}
	Goto waitclientrequest
    
    State fatalerror{
    	println("fatalerror ") color red
    }
    Goto waitclientrequest
    
    
	//Se setrobotstate è inviato da un attore diverso da Owner, non si fa nulla
	//Il caller però potrebbe non capire perchè il comando non è stato fatti
	//MA: setTheRobotState è una utility per allineare lo stato del robot
	//con lo stato che posizioniamo 'a mano'			  
	
    State checkTheOwnerForSet	{
		onMsg(setrobotstate : setpos(X,Y,D)){
			[# X = payloadArg(0)
			   Y = payloadArg(1)
			   D = payloadArg(2)
			   Caller = currentMsg.msgSender() 
               IsOwner = OwnerMngr.checkOwner( Caller )
			   
			#]			 
		}
   		//request engager -m checkowner : checkowner($Caller)
    }
    Goto setTheRobotState if [# IsOwner #] else waitclientrequest
    /*
    Transition t0 whenReply checkownerok     -> setTheRobotState
                  whenReply checkownerfailed -> waitclientrequest
    */
	State setTheRobotState{
		[# planner.setRobotState(X,Y,D) #]
		//println("setTheRobotState ($X, $Y, $D) ") color magenta
		[# planner.showCurrentRobotState(); #]	 
		delay 300  //Give time to the webpage ...
		//println("update resource for setTheRobotState") color magenta  
		updateResource [# planner.robotOnMap() #] 
	} 
	Goto waitclientrequest
	
    State checkTheOwnerForMove{
    	printCurrentMessage
    	[# Caller    = currentMsg.msgSender() 
    		StepTime = OwnerMngr.steptime  
    	#]
		onMsg( moverobot : moverobot(X,Y)){
			[# TargetX = payloadArg(0)
			   TargetY = payloadArg(1)
               IsOwner = OwnerMngr.checkOwner( Caller )
			   
		    #]
		}
    	//println("$name checkTheOwnerForMove $Caller") color blue
   			//request engager -m checkowner : checkowner($Caller)
    }
    Goto planTheRobotmoves if [# IsOwner #] else moveRefused    
    /*
    Transition t0 whenReply checkownerok     -> planTheRobotmoves //elabClientRequest
                  whenReply checkownerfailed -> moveRefused
 	*/
	
	/*
	State elabClientRequest{
		printCurrentMessage 
	}
	Goto planTheRobotmoves
	*/
	
	/* 
	 * Uso il planner per gestire il robot
	*/
	State planTheRobotmoves{	 
		//printCurrentMessage 
		[#  
		   Plan = planner.planForGoal(""+TargetX,""+TargetY).toString()
		   println("planTheRobotmoves $Plan")
		   Plan = planner.planCompacted(Plan) 
		   if( Plan.isEmpty()) Plan="''"
		   //CommUtils.outblue("$name | Plan to reach pos: $Plan")
		#]
		println("$name | Plan to reach pos: $Plan for $Caller")  color blue
		//chiedo al basicrobot di eseguire  Plan
		request planexec -m doplan : doplan($Plan,  $StepTime)
	}
	Transition t0 whenReply doplandone   -> endok
	              whenReply doplanfailed -> endko
	  
	State endok{
		//println("pos reached") 
		//Aggiorno il path sulla mappa
		[# planner.doPathOnMap(Plan) #]
		[# planner.showCurrentRobotState(); #]
		updateResource [# planner.robotOnMap() #] 
		replyTo moverobot with moverobotdone : moverobotdone(ok)
	}
	Goto waitclientrequest
	
	State endko{
		onMsg( doplanfailed : doplanfailed(ARG) ){
			[# val PathTodo = payloadArg(0) #]
			println("pos NOT reached - PathTodo = ${PathTodo} vs. $Plan") color red			 
			[#   var PathDone = Plan.substring(0, Plan.lastIndexOf(PathTodo))
				 if( PathDone == "" ) PathDone ="n"				 
				 else planner.doPathOnMap(PathDone)
			#]
			updateResource [# planner.robotOnMap() #]
			//println("uuu ${PathDone}") 
			//[# planner.doPathOnMap(PathDone) #]
			[# planner.showCurrentRobotState(); #]
			replyTo moverobot with moverobotfailed : moverobotfailed($PathDone,$PathTodo)
		}
	}
	Goto waitclientrequest
	
 	//Added June6
	State moveRefused{
		//println("moveRefused ") color red
		replyTo moverobot with moverobotfailed : moverobotfailed(none,youarenotowner)
	}
	Goto waitclientrequest
 
}

/*
 * ------------------------------
 * robotposclient (tester)
 * ------------------------------
 */

/* 
QActor robotposclient context ctxbasicrobot{
	
	State ss0 initial{
		println("$name request engage") color green
		request basicrobot -m engage : engage( robotposclient )
	}
 	Transition t0 whenReply engagedone    -> gototarget
	              whenReply engagerefused -> waitrobotfree
 	
 	State waitrobotfree{
		println("$name | Sorry, the robot is already engaged.")  color green
	}		
	 
	 
	State gototarget {
		println("$name goto (4,3)") color green
		//[# CommUtils.waitTheUser("$name | hit 1CR") #] //blocca anche basicrobot ...
		//delay 1000
		request basicrobot -m moverobot : moverobot(4,3)   
		//[# emitWithDelay("alarm","alarm(fire)", 1400)   #] 
	} 
	Transition t0 whenReply moverobotdone   -> handleAnswer
	              whenReply moverobotfailed -> handleAnswer
	
	State handleAnswer {
		printCurrentMessage color magenta
		//[# CommUtils.waitTheUser("$name | hit 1CR") #]
		//request basicrobot -m moverobot : moverobot(6,4)   
		//TODO: verificare che la direzione sia verso la porta
		//Come so la direzione? A cho chiedo di spostarsi?
		//Il basicrobot dovrebbe rispondere a messaggi di richiesta sullo stato
		//(posiione e direzione)
		request basicrobot -m getrobotstate : robotstate(ok)
	}
	Transition t0 whenReply robotstate -> handleRobotState
	
	State handleRobotState{
		printCurrentMessage
	}
}
*/

/*
 * ------------------------------
 * basicrobotusage (tester)
 * ------------------------------
 */
/*  
QActor basicrobotusage context ctxbasicrobot{
	[# val Plan    = "\"[w, w, l, w, w, w, w]\"" //Come quello restituito da doplan
		val MyName = name 
	#] 
	State ss0 initial { 	
		printCurrentMessage color black
		//delay 1000
		//[# CommUtils.waitTheUser("basicrobotusage, please hit 1CR")	 #]
		request basicrobot -m engage : engage( MyName )
	}
	//Transition t0 whenReply engagedone -> dowork
	Transition t0 whenReply engagedone -> testdoplan
	
 	
	State dowork{
		//forward basicrobot -m cmd : cmd(p)
		request basicrobot -m step : step(350) 
	}
	Transition t0 whenReply stepdone   -> handleStepDone
	              whenReply stepfailed -> handleStepFail
	
	State handleStepDone{
		printCurrentMessage color black
	}
	Goto dowork
	
	State handleStepFail{
		printCurrentMessage color black
	}
	
//Testdopoath	
	State testdoplan{
		request basicrobot -m doplan : doplan($Plan, 345)
	}
	Transition t0 whenReply doplandone   -> testdoplanEnd
				  whenReply doplanfailed -> testdoplanEnd
	State testdoplanEnd{
		printCurrentMessage color magenta
		forward basicrobot -m disengage :  disengage($MyName)
	}	
}
 */